#! /bin/sh /usr/share/dpatch/dpatch-run
## 01_unused_private_methods.dpatch by Jelmer Vernooij <jelmer@samba.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Fix dir seperator for POSIX

@DPATCH@

--- ndoc-1.3.1.orig/src/Documenter/LinearHtml/LinearHtmlDocumenter.cs	2005-01-30 02:18:37.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/LinearHtml/LinearHtmlDocumenter.cs	2005-09-25 22:24:40.000000000 +0200
@@ -607,17 +607,6 @@
 			return(sortedList);
 		}
 
-		void GetSummaryAndRemarks(XPathNavigator nav, out string summary, out string remarks)
-		{
-			XPathNavigator summaryNav = GetDescendantNodeWithName(nav, "summary");
-			XPathNavigator remarksNav = GetDescendantNodeWithName(nav, "remarks");
-			summary = GetNodeXmlFixCode(summaryNav);
-			if (summaryNav != null)
-				Console.WriteLine("GSAR: got {0} from {1}", summary, summaryNav.Value);
-			else Console.WriteLine("GSAR: No summary");
-			remarks = GetNodeXmlFixCode(remarksNav);
-		}
-
 		/// <summary>
 		/// Fix code node such that it will be rendered correctly (using pre).
 		/// </summary>
@@ -631,27 +620,6 @@
 		}
 
 		/// <summary>
-		/// Fix code node such that it will be rendered correctly (using pre).
-		/// </summary>
-		private void FixCodeNodes(XPathNavigator nav)
-		{
-			XmlNode n = null;
-			try
-			{
-				n = ((IHasXmlNode)nav).GetNode();
-			}
-			catch(Exception) 
-			{
-				return;
-			}
-
-			if (n != null) 
-			{
-				FixCodeNodes(n); // change <code> to <pre class="code">
-			}
-		}
-
-		/// <summary>
 		/// Fix any code nodes under the specified navigator, and return the node's
 		/// inner Xml. 
 		/// </summary>
--- ndoc-1.3.1.orig/src/Documenter/LinearHtml/LinearHtmlDocumenterConfig.cs	2005-01-30 02:18:37.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/LinearHtml/LinearHtmlDocumenterConfig.cs	2005-09-25 22:23:47.000000000 +0200
@@ -115,7 +115,6 @@
 				SetDirty();
 			}
 		}
-		void ResetOutputDirectory() { _outputDirectory = string.Format( ".{0}doc{0}", Path.DirectorySeparatorChar ); }
 
 
 		private bool _MethodParametersInTable;
--- ndoc-1.3.1.orig/src/Documenter/Msdn/HtmlHelp.cs	2005-02-19 17:25:08.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/Msdn/HtmlHelp.cs	2005-09-25 22:17:15.000000000 +0200
@@ -191,11 +191,6 @@
 			}
 		}
 
-		private string GetProjectFilename()
-		{
-			return _projectName + ".hhp";
-		}
-
 		private string GetContentsFilename()
 		{
 			return (_tocFiles.Count > 0) ? (string)_tocFiles[0] : string.Empty;
--- ndoc-1.3.1.orig/src/Documenter/Msdn/MsdnDocumenterConfig.cs	2005-02-19 17:25:08.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/Msdn/MsdnDocumenterConfig.cs	2005-09-25 22:16:00.000000000 +0200
@@ -98,7 +98,6 @@
 				SetDirty();
 			}
 		}
-		void ResetOutputDirectory() { _outputDirectory = string.Format( ".{0}doc{0}", Path.DirectorySeparatorChar ); }
 
 
 		/// <summary>Gets or sets the HtmlHelpName property.</summary>
@@ -418,7 +417,6 @@
 				}
 			}
 		}	
-		void ResetAdditionalContentResourceDirectory() { _AdditionalContentResourceDirectory = new FolderPath(); }
 
 
 		FilePath _ExtensibilityStylesheet = new FilePath();
@@ -442,7 +440,6 @@
 				}
 			}
 		}	
-		void ResetExtensibilityStylesheet() { _ExtensibilityStylesheet = new FilePath(); }
 	
 		short _LangID = 1033;
 
--- ndoc-1.3.1.orig/src/Documenter/Msdn2/HtmlHelp.cs	2005-02-19 17:33:42.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/Msdn2/HtmlHelp.cs	2005-09-25 22:22:05.000000000 +0200
@@ -191,11 +191,6 @@
 			}
 		}
 
-		private string GetProjectFilename()
-		{
-			return _projectName + ".hhp";
-		}
-
 		private string GetContentsFilename()
 		{
			return (_tocFiles.Count > 0) ? (string)_tocFiles[0] : string.Empty;
--- ndoc-1.3.1.orig/src/Documenter/Msdn2/Msdn2DocumenterConfig.cs	2005-02-19 19:42:11.000000000 +0100
+++ ndoc-1.3.1/src/Documenter/Msdn2/Msdn2DocumenterConfig.cs	2005-09-25 22:20:49.000000000 +0200
@@ -114,7 +114,6 @@
 				SetDirty();
 			}
 		}
-		void ResetOutputDirectory() { _outputDirectory = string.Format( ".{0}doc{0}", Path.DirectorySeparatorChar ); }
 
 
 		/// <summary>Gets or sets the HtmlHelpName property.</summary>
@@ -434,7 +433,6 @@
 				}
 			}
 		}	
-		void ResetAdditionalContentResourceDirectory() { _AdditionalContentResourceDirectory = new FolderPath(); }
 
 
 		FilePath _ExtensibilityStylesheet = new FilePath();
@@ -458,7 +456,6 @@
 				}
 			}
 		}	
-		void ResetExtensibilityStylesheet() { _ExtensibilityStylesheet = new FilePath(); }
 	
 		short _LangID = 1033;
 
--- ndoc-1.3.1/src/Documenter/Msdn/MsdnDocumenter.cs	2005-10-02 19:12:09.000000000 +0200
+++ ndoc-1.3.1x/src/Documenter/Msdn/MsdnDocumenter.cs	2005-10-02 19:09:07.000000000 +0200
@@ -569,30 +569,6 @@
 #endif
 		}
 
-		private void MakeHtmlForNamespaces(string assemblyName)
-		{
-			XmlNodeList namespaceNodes = xmlDocumentation.SelectNodes("/ndoc/assembly[@name=\"" + assemblyName + "\"]/module/namespace");
-			int[] indexes = SortNodesByAttribute(namespaceNodes, "name");
-
-			int nNodes = namespaceNodes.Count;
-
-			for (int i = 0; i < nNodes; i++)
-			{
-				OnDocBuildingProgress(i*100/nNodes);
-
-				XmlNode namespaceNode = namespaceNodes[indexes[i]];
-
-				if (namespaceNode.ChildNodes.Count > 0)
-				{
-					string namespaceName = (string)namespaceNode.Attributes["name"].Value;
-
-					MakeHtmlForNamespace(assemblyName, namespaceName);
-				}
-			}
-
-			OnDocBuildingProgress(100);
-		}
-
 		private void MakeHtmlForAssembliesSorted()
 		{
 			XmlNodeList assemblyNodes = xmlDocumentation.SelectNodes("/ndoc/assembly");
--- ndoc-1.3.1/src/Documenter/Msdn2/Msdn2Documenter.cs	2005-10-02 19:12:55.000000000 +0200
+++ ndoc-1.3.1x/src/Documenter/Msdn2/Msdn2Documenter.cs	2005-10-02 19:09:07.000000000 +0200
@@ -594,30 +594,6 @@
 #endif
 		}
 
-		private void MakeHtmlForNamespaces(string assemblyName)
-		{
-			XmlNodeList namespaceNodes = xmlDocumentation.SelectNodes("/ndoc/assembly[@name=\"" + assemblyName + "\"]/module/namespace");
-			int[] indexes = SortNodesByAttribute(namespaceNodes, "name");
-
-			int nNodes = namespaceNodes.Count;
-
-			for (int i = 0; i < nNodes; i++)
-			{
-				OnDocBuildingProgress(i*100/nNodes);
-
-				XmlNode namespaceNode = namespaceNodes[indexes[i]];
-
-				if (namespaceNode.ChildNodes.Count > 0)
-				{
-					string namespaceName = (string)namespaceNode.Attributes["name"].Value;
-
-					MakeHtmlForNamespace(assemblyName, namespaceName);
-				}
-			}
-
-			OnDocBuildingProgress(100);
-		}
-
 		private void MakeHtmlForAssembliesSorted()
 		{
 			XmlNodeList assemblyNodes = xmlDocumentation.SelectNodes("/ndoc/assembly");
